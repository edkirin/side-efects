在計算機科學中，如果操作、函數或表達式在其本地環境之外修改了某些狀態變量值，則稱其具有副作用，也就是說，除了返回值（主要
效果）之外，還具有可觀察到的效果。操作的調用者。示例副作用包括修改非局部變量、修改靜態局部變量、修改通過引用傳遞的可變參
數、執行 或調用其他具有副作用的函數。 在存在副作用的情況下，程序的行為可能取決於歷史；也就是說，評估的順序很重要。理解
和調試具有副作用的函數需要了解上下文及其可能的歷史

副作用在編程語言的設計和分析中起著重要作用。使用副作用的程度取決於
編程範式。例如，命令式編程通常用於產生副作用，更新系統狀態。相比之下，聲明式編程通常用於報告系統狀態，沒有副作用。

函
數式編程旨在最小化或消除副作用。沒有副作用使得對程序進行形式驗證變得更加容易。函數式語言 通過將 和其他有狀態計算替換為
單子操作來消除副作用。標準和 等函數式語言不限制副作用，但程序員習慣於避免它們。

彙編語言程序員必須意識到隱藏的副作用
——修改指令助記符中未提及的處理器狀態部分的指令。隱藏副作用的典型示例是隱式修改條件代碼（隱藏副作用）的算術指令，同時顯
式修改寄存器（預期效果）。具有隱藏副作用的指令集的一個潛在缺點是，如果許多指令對單個狀態具有副作用，例如條件代碼，那麼順
序更新該狀態所需的邏輯可能會成為性能瓶頸。這個問題在一些設計有流水線（自 年以來）或亂序執行的處理器上尤為嚴重。如果下一
條指令取決於這些影響的結果，這種處理器可能需要額外的控制電路來檢測隱藏的副作用並停止流水線。